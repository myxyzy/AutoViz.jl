var documenterSearchIndex = {"docs":
[{"location":"api/#API-1","page":"API","title":"API","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"List of functions and datastructure available in AutoViz","category":"page"},{"location":"api/#","page":"API","title":"API","text":"Modules = [AutoViz]","category":"page"},{"location":"api/#AutoViz.ArrowCar","page":"API","title":"AutoViz.ArrowCar","text":"A basic drawable rectangle representing a car. An arrow indicates the heading direction of the car.\n\nArrowCar{A<:AbstractArray{Float64}, C<:Colorant} <: Renderable\nArrowCar(pos::AbstractArray, angle::Float64=0.0; length = 4.8, width = 1.8,  color=colortheme[\"COLOR_CAR_OTHER\"], text=\"\", id=0)\nArrowCar(x::Real, y::Real, angle::Float64=0.0; length = 4.8, width = 1.8,  color=colortheme[\"COLOR_CAR_OTHER\"], text=\"\", id=0)\n\n\n\n\n\n","category":"type"},{"location":"api/#AutoViz.BlinkerOverlay","page":"API","title":"AutoViz.BlinkerOverlay","text":"BlinkerOverlay\n\nDisplays a circle on one of the top corner of a vehicle to symbolize a blinker.  fields: \n\non: turn the blinker on\nright: blinker on the top right corner, if false, blinker on the left \nveh: the vehicle for which to display the blinker \ncolor: the color of the blinker\nsize: the size of the blinker \n\n\n\n\n\n","category":"type"},{"location":"api/#AutoViz.Camera","page":"API","title":"AutoViz.Camera","text":"Camera abstract type\n\n\n\n\n\n","category":"type"},{"location":"api/#AutoViz.CameraState","page":"API","title":"AutoViz.CameraState","text":"CameraState\n\nRepresentation of camera parameters such as position, rotation and zoom level.\n\ncamera_center::VecE2{Real}: position of camera in [N,E] relative to the mean point. meters\ncamera_zoom::Real: camera zoom in [pix/m]\ncamera_rotation::Real: camera rotation in [rad]\n\n\n\n\n\n","category":"type"},{"location":"api/#AutoViz.CarFollowingStatsOverlay","page":"API","title":"AutoViz.CarFollowingStatsOverlay","text":"CarFollowingStatsOverlay\n\nDisplays statistics about the front neighbor of the car of id target_id.\n\nConstructor\n\nCarFollowingStatsOverlay(;target_id, verbosity=1, color=colorant\"white\", font_size=10)\n\n\n\n\n\n","category":"type"},{"location":"api/#AutoViz.ComposedCamera","page":"API","title":"AutoViz.ComposedCamera","text":"ComposedCamera <: Camera\n\nComposition of several cameras. The update_camera actions of the individual cameras are applied in the order in which they are saved in the cameras array. States of individual cameras are ignored, the state of the composed camera is the one that will be used for rendering.\n\nExample Usage\n\ncam = ComposedCamera(cameras=[SceneFollowCamera(), ZoomingCamera()])\n\n\n\n\n\n","category":"type"},{"location":"api/#AutoViz.EntityRectangle","page":"API","title":"AutoViz.EntityRectangle","text":"A drawable rectangle with rounded corners representing an entity.\n\n\n\n\n\n","category":"type"},{"location":"api/#AutoViz.FancyCar","page":"API","title":"AutoViz.FancyCar","text":"A drawable 'fancy' svg image of a race car. The car is placed at the position of entity and the width and length are scaled accordingly. The color of the car can be specified using the color keyword.\n\n\n\n\n\n","category":"type"},{"location":"api/#AutoViz.FancyPedestrian","page":"API","title":"AutoViz.FancyPedestrian","text":"A drawable 'fancy' svg image of a pedestrian. The pedestrian is placed at the position of entity and the width and length of the original image are scaled accordingly. The color of the pedestrian can be specified using the color keyword.\n\n\n\n\n\n","category":"type"},{"location":"api/#AutoViz.HistogramOverlay","page":"API","title":"AutoViz.HistogramOverlay","text":"HistogramOverlay\n\nDisplay a bar at the specified position pos, the bar is of size width, height and is filled up to a given proportion of its height.  The fill proportion is set using val, it should be a number between 0 and 1. If it is 0, the bar is not filled, if it is 1 it is filled to the top.\n\nFields\n\npos::VecE2{Float64} = VecE2(0.,0.)\ncoordinate_system::Symbol = :scene\nlabel::String = \"histogram\"\nval::Float64 = 0.5 should be between 0 and 1\nwidth::Float64 = 2.\nheight::Float64 = 5.\nfill_color::Colorant = colorant\"blue\"\nline_color::Colorant = colorant\"white\"\nfont_size::Int64 = 15 # [pix]\nlabel_pos::VecSE2{Float64} = pos + VecSE2(0., -height/2) position of the label\n\n\n\n\n\n","category":"type"},{"location":"api/#AutoViz.IDOverlay","page":"API","title":"AutoViz.IDOverlay","text":"IDOverlay\n\nDisplay the ID on top of each entity in a scene. The text can be customized with the color::Colorant (default=white) and font_size::Int64 (default=15) keywords. The position of the ID can be adjusted using x_off::Float64 and y_off::Float64 (in camera coordinates).\n\nFields\n\ncolor::Colorant = colorant\"white\"\nfont_size::Int = 15\nx_off::Float64 = 0.\ny_off::Float64 = 0.\n\n\n\n\n\n","category":"type"},{"location":"api/#AutoViz.NeighborsOverlay","page":"API","title":"AutoViz.NeighborsOverlay","text":"NeighborsOverlay\n\nDraws a line between a vehicle and its neighbors. The neighbors are linked with different colors depending on their lanes. This overlay needs to be wrapped as a RenderableOverlay which needs a scene and a roadway to perform the calculation of the neighbors.\n\nFields\n\ntarget_id::Int\ncolor_L::Colorant = colorant\"blue\"\ncolor_M::Colorant = colorant\"green\ncolor_R::Colorant = colorant\"red\"\nline_width::Float64 = 0.5 \ntextparams::TextParams = TextParams()\n\n\n\n\n\n","category":"type"},{"location":"api/#AutoViz.Overwash","page":"API","title":"AutoViz.Overwash","text":"Overwash\n\noverlay that renders a plain color on the whole canvas.\n\n\n\n\n\n","category":"type"},{"location":"api/#AutoViz.RenderModel","page":"API","title":"AutoViz.RenderModel","text":"RenderModel\n\nModel to keep track of rendering instructions and background color.\n\ninstruction_set::AbstractVector{Tuple}: set of render instructions (function, array of inputs sans ctx, coordinate_system)\nbackground_color::RGB: background color\n\nFields\n\ninstruction_set  :: AbstractVector{Tuple} = Array{Tuple}(undef, 0)\nbackground_color :: RGB = colortheme[\"background\"]\n\n\n\n\n\n","category":"type"},{"location":"api/#AutoViz.RenderableOverlay","page":"API","title":"AutoViz.RenderableOverlay","text":"RenderableOverlay\n\nDecorator which allows to use SceneOverlay objects together with the method     render([Renderables])\n\nThis is required primarily for allowing backward compatibility with overlays that use the old rendering interface.\n\nusage:  RenderableOverlay(o::Overlay, scene::Frame, roadway::Roadway)\n\n\n\n\n\n","category":"type"},{"location":"api/#AutoViz.SceneFollowCamera","page":"API","title":"AutoViz.SceneFollowCamera","text":"SceneFollowCamera\n\nCamera centered over all vehicles.\n\nBy default, the scene is tracked in x and y direction and the zoom level  is adapted to fit all vehicles in the scene. Tracking in either direction can be disabled by setting the x or y keys to a desired value. The zoom level can be fixed by passing a value to zoom. The value of padding specifies the width of the additional border around the zoomed-in area.\n\n\n\n\n\n","category":"type"},{"location":"api/#AutoViz.StaticCamera","page":"API","title":"AutoViz.StaticCamera","text":"StaticCamera <: Camera\n\nFix the position and the zoom as specified in the constructor.\n\nConstructor\n\nStaticCamera(position::VecE2=(0,0), zoom::Real=4)\n\n\n\n\n\n","category":"type"},{"location":"api/#AutoViz.TargetFollowCamera","page":"API","title":"AutoViz.TargetFollowCamera","text":"TargetFollowCamera <: Camera\n\nCamera which follows the vehicle with ID target_id. By default, the target vehicle is tracked in x and y direction. Tracking in either direction can be disabled by setting the  x or y keys to a desired value.\n\nConstructor\n\nTargetFollowCamera(target_id; x=NaN, y=NaN, kwargs...)\n\n\n\n\n\n","category":"type"},{"location":"api/#AutoViz.TextOverlay","page":"API","title":"AutoViz.TextOverlay","text":"TextOverlay\n\nDisplays some text at the desired location.  The coordinates and size units are in pixels by default.  The option coordinate_system allows to use different units.\n\nFields\n\ntext::Vector{String}\ncolor::Colorant = colorant\"white\"\nfont_size::Int = 10\npos::VecE2 = VecE2(10, font_size)\nline_spacing::Float64 = 1.5 multiple of font_size\ncoordinate_system::Symbol=:camera_pixels\n\n\n\n\n\n","category":"type"},{"location":"api/#AutoViz.VelocityArrow","page":"API","title":"AutoViz.VelocityArrow","text":"A drawable arrow representing the current velocity vector of an entity. The arrow points to the location where the vehicle will be one second in the future (assuming linear motion).\n\n\n\n\n\n","category":"type"},{"location":"api/#AutoViz.ZoomingCamera","page":"API","title":"AutoViz.ZoomingCamera","text":"ZoomingCamera <: Camera\n\nCamera which gradually changes the zoom level of the scene to zoom_target with step size dz.\n\n\n\n\n\n","category":"type"},{"location":"api/#AutoViz.add_instruction!-Tuple{RenderModel,Function,Tuple}","page":"API","title":"AutoViz.add_instruction!","text":"Add an instruction to the rendermodel\n\nINPUT:     rendermodel   - the RenderModel we are adding the instruction to     f             - the function to be called, the first argument must be a CairoContext     args          - tuple of input arguments to f, skipping the CairoContext     coordinatesystem - in which coordinate system are the coordinates given (one of :scene, :camerapixels, :camerarelative)       :scene - coordinates are physical coordinates in the world frame in unit [meters]       `:camerapixels- coordinates are in pixels and relative to the rectangle selected by the camera in unit [pixels]:camera_relative` - coordinates are in percentages in the range 0 to 1 of the rectangle selected by the camera\n\nex: addinstruction!(rendermodel, rendertext, (\"hello world\", 10, 20, 15, [1.0,1.0,1.0]))\n\n\n\n\n\n","category":"method"},{"location":"api/#AutoViz.add_renderable!-Tuple{RenderModel,String}","page":"API","title":"AutoViz.add_renderable!","text":"Render function for text\n\n\n\n\n\n","category":"method"},{"location":"api/#AutoViz.add_renderable!-Union{Tuple{E}, Tuple{RenderModel,E}, Tuple{RenderModel,E,Union{Nothing, Colorant}}} where E<:Records.Entity","page":"API","title":"AutoViz.add_renderable!","text":"Helper function for directly rendering entities, takes care of wrapping them in renderable objects\n\n\n\n\n\n","category":"method"},{"location":"api/#AutoViz.add_renderable!-Union{Tuple{E}, Tuple{RenderModel,Frame{E}}} where E<:Records.Entity","page":"API","title":"AutoViz.add_renderable!","text":"Helper function for directly rendering frames of renderable entities\n\n\n\n\n\n","category":"method"},{"location":"api/#AutoViz.isrenderable","page":"API","title":"AutoViz.isrenderable","text":"Return true if an object or type is directly renderable, false otherwise.\n\nNew types should implement the isrenderable(t::Type{NewType}) method.\n\n\n\n\n\n","category":"function"},{"location":"api/#AutoViz.render-Tuple{AbstractArray{T,1} where T}","page":"API","title":"AutoViz.render","text":"Draw all renderables to a surface using the parameters specified in rendermodel. The canvas is initialized to a CairoSurface of dimensions canvas_width, canvas_height. All renderables must inherit from Renderable and implement the add_renderable! function which adds instructions for rendering to the render model.\n\nYou should call update_camera! before calling render to adapt the camera to the new scene. The instructions of the rendermodel are reset automatically at the beginning of this function.\n\n\n\n\n\n","category":"method"},{"location":"api/#AutoViz.set_color_theme-Tuple{Any}","page":"API","title":"AutoViz.set_color_theme","text":"set_color_theme(colortheme)\n\nChange the color theme of the package\n\n\n\n\n\n","category":"method"},{"location":"api/#AutoViz.camera_fit_to_content","page":"API","title":"AutoViz.camera_fit_to_content","text":"camera_fit_to_content(rendermodel::RenderModel, ctx::CairoContext, canvas_width::Integer = DEFAULT_CANVAS_WIDTH, canvas_height::Integer = DEFAULT_CANVAS_HEIGHT; percent_border::Real = 0.0)\n\nHelper function that determines camera parameters such that all rendered content fits on the canvas.\n\n\n\n\n\n","category":"function"},{"location":"#About-1","page":"About","title":"About","text":"","category":"section"},{"location":"#","page":"About","title":"About","text":"This the documentation for AutoViz.jl. For now it is just a list of functions. ","category":"page"},{"location":"#","page":"About","title":"About","text":"","category":"page"}]
}
